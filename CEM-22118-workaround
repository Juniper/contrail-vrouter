#!/bin/bash

SLEEP_INTERVAL=1m
COMMAND="contrail-status"
CURRENT_TIME="date '+%b %d %H:%M:%S'"
WAIT=$2
PATH_DIR=`date +%Y_%m_%d_%H_%M_%S`
mkdir -p ${PATH_DIR}
touch temp_file 

function stop_data_collection() {
    echo "*********Stop data collection***********" 
}

function restart_data_collection() {
    echo "********* RESTARTING DATA COLLETCION **********"
    stop_data_collection
    start_data_collection
}

function start_data_collection() {
  echo "*********** FETHCHING THE AGENT DOCKER UUID **************"
  DOCKER_UUID=`docker ps | grep contrail-vrouter-agent | awk  '{print $1}'`
  if [ $DOCKER_UUID == 0 ];
  then
        echo "docker contrail-vrouter-agent is not present [$(eval $CURRENT_TIME)] "
  else 
        echo "docker contrail-vrouter-agent is present [$(eval $CURRENT_TIME)]"
  fi

  `docker exec -i $DOCKER_UUID bash -c "vif --list" > $PATH_DIR/vif_list_op` 
   if [ $? -eq 0 ];
   then
    echo "vif --list execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "vif --list execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   
  `docker exec -i $DOCKER_UUID bash -c "dropstats -l 0" > $PATH_DIR/drop_stats`   
   if [ $? -eq 0 ];
   then
    echo "dropstats -l 0 execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "dropstats -l 0  execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi

  `docker exec -i $DOCKER_UUID bash -c "flow  -l " > $PATH_DIR/flow_list`
   if [ $? -eq 0 ];
   then
    echo "flow -l  execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "flow -l  execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi

   echo "************ COLLECTING THE INTROSPECTS ****************"

   CURL_URL="http://127.0.0.1:8085/Snh_SandeshUVECacheReq?x=NodeStatus"
   

   return_code=$(curl -v -s $CURL_URL --write-out '%{http_code}' -o temp_file)

   if [[ $return_code != 200  ]] ; then
     echo "$url SAID $code, NodeStatus (Curl) is unsuccessful at [$(eval $CURRENT_TIME)]"
     rm -f temp_file
   else 
     echo "curl on NodeStatus execution successful [$(eval $CURRENT_TIME)]"
     mv temp_file $PATH_DIR/UVECNodeStatus
   fi
  
   CURL_URL="http://127.0.0.1:8085/agent.xml#Snh_ItfReq"

   return_code=$(curl -v -s $CURL_URL --write-out '%{http_code}' -o temp_file)

   if [[ $return_code != 200  ]] ; then
     echo "$url SAID $code, Curl is unsuccessful at [$(eval $CURRENT_TIME)]"
     rm -f temp_file
   else
     echo "curl on SnhItfReq execution successful [$(eval $CURRENT_TIME)]"
     mv temp_file $PATH_DIR/Snh_ItfReq
   fi

   rm -rf ~/temp_file

   echo "************* COLLECTING THE MESSAGES **********"

   cp /var/log/contrail     $PATH_DIR/contrail 
   cp /var/log/messages  $PATH_DIR/messages
   cp /var/log/containers/contrail $PATH_DIR/contrail
}


function fetch_contrail_status() {
  echo "**********Check contrail-status *************"
  `$COMMAND > $PATH_DIR/contrail_status_collected`
  if [ $? -eq 0 ];
  then
     echo "$COMMAND executed successfully [$(eval $CURRENT_TIME)]"
  else
     echo "$COMMAND terminated unsuccessfully [$(eval $CURRENT_TIME)]"
  fi
}

function agent_status_detection() {
     fetch_contrail_status
     vrouter_agent_status=`cat $PATH_DIR/contrail_status_collected  | grep agent | tail -n1 |  awk  '{print $2}'`
     if [ "$vrouter_agent_status" = "active" ] || [ "$vrouter_agent_status" = "inactive" ]  
     then
        echo "**********contrail-vrouter-agent is $vrouter_agent_status [$(eval $CURRENT_TIME)] ************"
        echo "********** S K I P P I N G *** T H E *** D A T A  C O L L E C T I O N **********"
        exit 1
     elif [ "$vrouter_agent_status" = "initializing" ]
     then 
        echo "**********contrail-vrouter-agent is $vrouter_agent_status************"
        while [ $WAIT -gt 0 ]
        do
            sleep ${SLEEP_INTERVAL}
            fetch_contrail_status
            vrouter_agent_status=`cat $PATH_DIR/contrail_status_collected  | grep agent | tail -n1 |  awk  '{print $2}'`
            echo "**********contrail-vrouter-agent is in $vrouter_agent_status at [$(eval $CURRENT_TIME)] "
            WAIT=$(( $WAIT - 1))
         done
            if [ "$vrouter_agent_status" = "initializing" ]
            then
              echo "*********** S T A R T I N G ******* D A T A ******* C O L L E C T I O N ************"
              start_data_collection
              echo "*********** S T A R T I N G ******* F A U L T ******** C O R R E C T I O N **********"
              fault_correction
            fi
     fi 
}

function fault_correction(){ 
     fetch_contrail_status
     vrouter_agent_status=`cat $PATH_DIR/contrail_status_collected  | grep agent | tail -n1 |  awk  '{print $2}'`
     if [ "$vrouter_agent_status" = "initializing" ]
     then
       echo "******* RECOVERING FROM INITIALIZED STATE *******"
       DOCKER_UUID=`docker ps | grep contrail-vrouter-agent | awk  '{print $1}'`
       if [ $DOCKER_UUID == 0 ];
       then
         echo "docker contrail-vrouter-agent is not present [$(eval $CURRENT_TIME)] "
       else
         echo "docker contrail-vrouter-agent is present [$(eval $CURRENT_TIME)]"
       fi
 
       result=`docker restart $DOCKER_UUID`

       if [ $result == $DOCKER_UUID ];
       then
         echo "docker restart $DOCKER_UUID  successful [$(eval $CURRENT_TIME)]"
       else  
         echo "docker restart $DOCKER_UUID  failed [$(eval $CURRENT_TIME)]"
       fi
      fi
}      

if [ "$UID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

if [ $# -lt 1 ]
then
  echo "Usage : $0 start < time > |stop|restart "
  exit
fi

case "$1" in
  start)    agent_status_detection start 
          ;;
  stop)     stop_data_collection stop  
          ;;
  restart)  restart_data_collection restart 
          ;;
  *)      echo "Invalid command - Valid->start < time > |stop|restart"
          ;;
esac
