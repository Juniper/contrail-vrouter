#!/bin/bash

echo $$ > /var/run/myscript.pid

SLEEP_INTERVAL=1m
COMMAND="contrail-status"
CURRENT_TIME="date '+%b %d %H:%M:%S'"
WAIT=$2
Pause=$4
mkdir -p AGENT_MON
#PATH_DIR="$(date +%Y_%m_%d_%H_%M_%S)"

# agent_status_detection
# monitors agent's status in duration of user defined
# time * 60 seconds , if the agent is stuck in initializing state
# this will trigger data collection , recovery code
function agent_status_detection() {


     PATH_DIR="$(date +%Y_%m_%d_%H_%M_%S)"
     mkdir -v AGENT_MON/"${PATH_DIR}"

     fetch_contrail_status
     vrouter_agent_status=`cat AGENT_MON/$PATH_DIR/contrail_status_collected  | grep agent | tail -n1 |  awk  '{print $2}'`
     if [ "$vrouter_agent_status" = "active" ] || [ "$vrouter_agent_status" = "inactive" ]
     then
        echo "************* contrail-vrouter-agent is $vrouter_agent_status [$(eval $CURRENT_TIME)] ************"
        echo "************* S K I P P I N G *** T H E *** D A T A  C O L L E C T I O N **********"
     elif [ "$vrouter_agent_status" = "initializing" ]
     then
        echo "************* contrail-vrouter-agent is $vrouter_agent_status************"
        while [ $WAIT -gt 0 ]
        do
            sleep ${SLEEP_INTERVAL}
            fetch_contrail_status
       #     vrouter_agent_status=`cat AGENT_MON/$PATH_DIR/contrail_status_collected  | grep agent | tail -n1 |  awk  '{print $2}'`
       #     echo "**********contrail-vrouter-agent is in $vrouter_agent_status at [$(eval $CURRENT_TIME)] "
            WAIT=$(( $WAIT - 1))
         done
            if [ "$vrouter_agent_status" = "initializing" ]
            then
              echo "************* S T A R T I N G ******* D A T A ******* C O L L E C T I O N ************"
              start_data_collection
              echo "************* S T A R T I N G ******* F A U L T ******** C O R R E C T I O N **********"
              fault_correction
            fi
     fi
}

# stop_data_collection
# Need to add functionality to stop the 
# data collection if required . Empty method 
# is added as to have a framework
function stop_data_collection() {
    echo "************* Stop data collection***********" 
}

# restart_data_collection
# Need to add functionality to stop and start the 
# data collection if required . Empty method 
# is added as to have a framework
function restart_data_collection() {
    echo "************* RESTARTING DATA COLLETCION **********"
    stop_data_collection
    start_data_collection
}

# start_data_collection
# This function does the data collection inside 
# the compute , docker with a curl calls
function start_data_collection() {
  echo "************* FETCHING THE AGENT DOCKER UUID **************"
  DOCKER_UUID=`docker ps | grep contrail-vrouter-agent | awk  '{print $1}'`
  if [ $DOCKER_UUID == 0 ];
  then
        echo "docker contrail-vrouter-agent is not present [$(eval $CURRENT_TIME)] "
  else
        echo "docker contrail-vrouter-agent is present [$(eval $CURRENT_TIME)]"
  fi
  `docker exec -i $DOCKER_UUID bash -c "vif --list" > AGENT_MON/$PATH_DIR/vif_list_op."$(date +"%Y_%m_%d_%I_%M_%p").log" 2>&1`
   if [ $? -eq 0 ];
   then
    echo "vif --list execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "vif --list execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi

  `docker exec -i $DOCKER_UUID bash -c "dropstats -l 0" > AGENT_MON/$PATH_DIR/drop_stats."$(date +"%Y_%m_%d_%I_%M_%p").log" 2>&1`
   if [ $? -eq 0 ];
   then
    echo "dropstats -l 0 execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "dropstats -l 0  execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
  `docker exec -i $DOCKER_UUID bash -c "flow  -l " > AGENT_MON/$PATH_DIR/flow_list."$(date +"%Y_%m_%d_%I_%M_%p").log" 2>&1`
   if [ $? -eq 0 ];
   then
    echo "flow -l  execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "flow -l  execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   `timeout 60 journalctl > AGENT_MON/$PATH_DIR/journalctl."$(date +"%Y_%m_%d_%I_%M_%p").log" 2>&1`
   if [ $? -eq 0 ];
   then
    echo "journalctl  execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "journalctl  execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi

   `timeout 10 docker logs -f  $DOCKER_UUID > AGENT_MON/$PATH_DIR/docker_logs."$(date +"%Y_%m_%d_%I_%M_%p").log" 2>&1`
   if [ $? -ne 0 ];
   then
    echo "docker logs  execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "docker logs  execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   echo "************* COLLECTING THE MESSAGES **********"
   cp -r  /var/log/contrail     AGENT_MON/$PATH_DIR/contrail."$(date +"%Y_%m_%d_%I_%M_%p")"
   cp -r  /var/log/messages  AGENT_MON/$PATH_DIR/messages."$(date +"%Y_%m_%d_%I_%M_%p")"
   cp -r  /var/log/containers/contrail AGENT_MON/$PATH_DIR/contrail."$(date +"%Y_%m_%d_%I_%M_%p")"

   echo "************* CPU UTILIZATION ***********"
   `top -b -n 3 >> AGENT_MON/$PATH_DIR/CPU_utilization."$(date +"%Y_%m_%d_%I_%M_%p")" 2>&1`
   if [ $? -eq 0 ];
   then
    echo "top command  execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "top command execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   echo "************* MEMORY UTILIZATION ************"
   `free -m > AGENT_MON/$PATH_DIR/Memory_utilization."$(date +"%Y_%m_%d_%I_%M_%p")" 2>&1`
   if [ $? -eq 0 ];
   then
    echo "memory check is  successful at [$(eval $CURRENT_TIME)]"
   else
    echo "memory check is  unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   echo "************* CRASH CHECK AND COPY *************"
   if [ -e /var/crashes/core* ];
   then
      echo "Crashes are present , copying at [$(eval $CURRENT_TIME)]"
      mv /var/crashes/core*   AGENT_MON/$PATH_DIR
   else
      echo "Crashes are not present  at [$(eval $CURRENT_TIME)]"
   fi

   echo "************* NETSTAT INFORMATION **************"
  `netstat -antp > AGENT_MON/$PATH_DIR/netstat_information."$(date +"%Y_%m_%d_%I_%M_%p")" 2>&1`
   if [ $? -eq 0 ];
   then
    echo "netstat -antp execution successful at [$(eval $CURRENT_TIME)]"
   else
    echo "netstat -antp  execution unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   echo "************* GCORE COLLECTION ****************"

   agent_pid=`/bin/ps -C contrail-vrouter-agent -o pid=`
   echo "contrail-vrouter-agent is running with PID = $agent_pid"

   `gcore $agent_pid `
   if [ $? -ne  0 ];
   then
   echo "gcore collection  successful at [$(eval $CURRENT_TIME)]"
   else
   echo "gcore collection unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   sleep 10
   mv core.*  AGENT_MON/$PATH_DIR
   echo "************* TCP DUMP FOR XMPP COMMUNICATION ***************"

   `timeout 60 tcpdump  -nei any port 5269 -w AGENT_MON/$PATH_DIR/tcpdump_on_5269."$(date +"%Y_%m_%d_%I_%M_%p")".pcap `
   if [ $? -ne 0 ];
   then
    echo "tcpdump collection successful at [$(eval $CURRENT_TIME)]"
   else
    echo "tcpdump collection unsuccessful at [$(eval $CURRENT_TIME)]"
   fi
   echo "************* E N D*** O F *** D A T A ***** C O L L E C T I O N ************"
}

function data_daemonize(){
      while true; do
         agent_status_detection 
         duration=$((60 * Pause))
         echo "*************  AGENT-MON starts again after $duration *************"
         sleep ${duration}
      done
}
# fetch_contil_status  
# This function will call the contrail-status command , collects the output 
 function fetch_contrail_status() {
  echo "************* Check contrail-status *************"
  `$COMMAND > AGENT_MON/$PATH_DIR/contrail_status_collected`
  if [ $? -eq 0 ];
  then
     echo "$COMMAND executed successfully [$(eval $CURRENT_TIME)]"
  else
     echo "$COMMAND terminated unsuccessfully [$(eval $CURRENT_TIME)]"
  fi
}

function fault_correction(){
     fetch_contrail_status
     vrouter_agent_status=`cat AGENT_MON/$PATH_DIR/contrail_status_collected  | grep agent | tail -n1 |  awk  '{print $2}'`
     echo "************* contrail-vrouter-agent is $vrouter_agent_status [$(eval $CURRENT_TIME)] ************"
     if [ "$vrouter_agent_status" = "initializing" ]
     then
       echo "************* RECOVERING FROM INITIALIZED STATE *******"
       DOCKER_UUID=`docker ps | grep contrail-vrouter-agent | awk  '{print $1}'`
       if [ $DOCKER_UUID == 0 ];
       then
         echo "docker contrail-vrouter-agent is not present [$(eval $CURRENT_TIME)] "
       else
         echo "docker contrail-vrouter-agent is present [$(eval $CURRENT_TIME)]"
       fi

       result=`docker restart $DOCKER_UUID`
       if [ $result == $DOCKER_UUID ];
       then
         echo "docker restart $DOCKER_UUID  successful [$(eval $CURRENT_TIME)]"
       else
         echo "docker restart $DOCKER_UUID  failed [$(eval $CURRENT_TIME)]"
       fi
      else
        echo "docker is in $vrouter_agent_status state , restart is not required"
        exit 1
      fi
     fetch_contrail_status
     vrouter_agent_status=`cat AGENT_MON/$PATH_DIR/contrail_status_collected  | grep agent | tail -n1 |  awk  '{print $2}'`
     echo "************* AGENT MONITORING IS COMPLETE ********" 
     echo "************* contrail-vrouter-agent  $vrouter_agent_status state ********"
}
if [ "$UID" -ne 0 ]
  then echo "Please run as root"
  exit
fi
if [ $# -lt 1 ]
then
  echo "Usage : $0 start <time>  | stop|restart "
  exit
fi
case "$1" in
  start)  agent_status_detection start
          ;;
  stop)     stop_data_collection stop
          ;;
  daemon) data_daemonize daemon
          ;;
  restart)  restart_data_collection restart
          ;;
  *)      echo "Invalid command - Valid->start < wait_time > interval <pause_time> |stop|restart"
          ;;
esac

