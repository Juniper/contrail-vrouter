#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
import os
import sys

Import('VRutilsEnv')
env = VRutilsEnv.Clone()
VTestEnv = env;

src_root = Dir('#').srcnode().abspath
build_root = Dir(env['TOP']).abspath
sandesh_file = src_root + '/vrouter/sandesh/vr.sandesh'
build_dir = build_root + '/vrouter/utils/vtest/'

system_header_path = GetOption('system-header-path')
if system_header_path:
    env.Append(CPPPATH = system_header_path + '/include/')

env.Append(CPPPATH = ['./include', build_dir, build_root+'/../include'])
env.Append(CPPPATH = '/usr/include/libxml2')
env.Append(CCFLAGS = '-g -std=gnu99')

if env['OPT'] == 'coverage':
    libvrutil = ['vrutil', 'gcov']
else:
    libvrutil = 'vrutil'

libvrutil_objs = [env.Object('nl_util.lo', '../nl_util.c'), 
                  env.Object('udp_util.lo', '../udp_util.c'),
                  env.Object('ini_parser.lo', '../ini_parser.c'),
                  env.Object('vr_util.lo', '../vr_util.c')]

libvrutil_objs.append(env.Object('unix_util.lo', '../unix_util.c'))

env.Replace(LIBPATH = env['TOP_LIB'])
env.Append(LIBPATH = ['.', '../../sandesh', './vhost/lib/'])
env.Replace(LIBS = [libvrutil, 'sandesh-c', 'dp_sandesh_c', 'xml2'])
env.Append(LIBS = ['pcap', 'rt', 'nl-3', 'nl-genl-3'])

sandesh_gen = env.Program('sandesh_gen.c')

env.Command(['vt_gen_sandesh.c', 'vt_gen_sandesh_expect.c', 'vt_gen_message_modules.c', 'vt_gen_message_modules.h'],
    [sandesh_gen], 'cd %s && %s/vrouter/utils/vtest/sandesh_gen %s' % (build_dir, build_root, sandesh_file))

env.Command('libjnprvnet.a', None, 'make -C %s/vrouter/utils/vtest/vhost' % (src_root))

vrutil = env.StaticLibrary('libvrutil.a', libvrutil_objs)

vtest_src = [
                'vt_main.c',
                'vt_message.c',
                'vt_gen_lib.c',
                'vt_gen_message_modules.c',
                'vt_gen_sandesh.c',
                'vt_gen_sandesh_expect.c',
                'vt_sandesh_response.c',
                'vt_process_xml.c',
		'vt_packet.c'
            ]

vtest = env.Program('vtest', map(lambda s_: env.Object(s_), vtest_src), LIBS = env['LIBS'] + ['libjnprvnet.a'])
env.Requires(vtest, 'libjnprvnet.a')
env.Requires(vtest, vrutil)

Export('vtest')

# Local Variables:
# mode: python
# End:
